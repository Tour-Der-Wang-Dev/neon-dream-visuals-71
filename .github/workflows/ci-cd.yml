name: 🚀 CI/CD Pipeline - AI Image Generator Platform

# =============================================================================
# TRIGGER CONFIGURATION
# Defines when this workflow should run
# =============================================================================
on:
  # Trigger on pushes to main/master branches
  push:
    branches: [main, master, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  
  # Trigger on pull requests to main/master
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  
  # Scheduled runs for dependency checks and maintenance
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  
  # Manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: false
        type: boolean

# =============================================================================
# GLOBAL ENVIRONMENT VARIABLES
# Available to all jobs in the workflow
# =============================================================================
env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  DEPLOY_TIMEOUT: '10m'
  ARTIFACT_RETENTION_DAYS: 30

# =============================================================================
# CONCURRENCY CONTROL
# Prevents multiple workflows from running simultaneously
# =============================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# =============================================================================
# WORKFLOW JOBS
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # SETUP & VALIDATION JOB
  # Prepares the environment and validates basic requirements
  # ---------------------------------------------------------------------------
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      should-deploy: ${{ steps.deployment-check.outputs.should-deploy }}
      target-environment: ${{ steps.deployment-check.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🟢 Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: 📦 Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: 🔍 Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit
          npm ls --depth=0
      
      - name: 🎯 Determine Deployment Target
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # ---------------------------------------------------------------------------
  # CODE QUALITY & SECURITY JOB
  # Runs linting, formatting, and security checks
  # ---------------------------------------------------------------------------
  quality-check:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    
    strategy:
      matrix:
        check-type: [lint, type-check, security, format]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
      
      - name: 📦 Restore Dependencies
        if: needs.setup.outputs.cache-hit == 'true'
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
      
      - name: 🔍 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
      
      - name: 🧹 ESLint Check
        if: matrix.check-type == 'lint'
        run: |
          npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
          npm run lint
      
      - name: 🔧 TypeScript Check
        if: matrix.check-type == 'type-check'
        run: npm run type-check
      
      - name: 🛡️ Security Audit
        if: matrix.check-type == 'security'
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate
      
      - name: 💅 Format Check
        if: matrix.check-type == 'format'
        run: |
          npm run format:check || {
            echo "❌ Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          }
      
      - name: 📊 Upload SARIF Results
        if: matrix.check-type == 'lint' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif

  # ---------------------------------------------------------------------------
  # TESTING JOB WITH MATRIX STRATEGY
  # Runs comprehensive test suite across multiple environments
  # ---------------------------------------------------------------------------
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    needs: setup
    if: github.event.inputs.skip_tests != 'true'
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
        test-type: [unit, integration, e2e]
        exclude:
          # Skip E2E tests on Windows and macOS for faster CI
          - os: windows-latest
            test-type: e2e
          - os: macos-latest
            test-type: e2e
          # Skip Node 20 on non-Ubuntu for resource optimization
          - os: windows-latest
            node-version: '20'
          - os: macos-latest
            node-version: '20'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔧 Build Application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: 🧪 Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit -- --coverage --watchAll=false
        env:
          CI: true
      
      - name: 🔗 Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
      
      - name: 🎭 E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run preview &
          sleep 5
          npm run test:e2e
        env:
          CI: true
      
      - name: 📊 Upload Coverage Reports
        if: matrix.test-type == 'unit' && matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: 📋 Test Results Summary
        if: always()
        run: |
          echo "## Test Results - ${{ matrix.os }} Node ${{ matrix.node-version }} (${{ matrix.test-type }})" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Duration | ${{ steps.test.duration }} |" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # BUILD JOB WITH OPTIMIZATION
  # Creates optimized production builds with artifacts
  # ---------------------------------------------------------------------------
  build:
    name: 🏗️ Build & Optimize
    runs-on: ubuntu-latest
    needs: [setup, quality-check]
    timeout-minutes: 15
    
    strategy:
      matrix:
        build-target: [modern, legacy]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🏗️ Build Application (${{ matrix.build-target }})
        run: |
          if [[ "${{ matrix.build-target }}" == "legacy" ]]; then
            VITE_LEGACY_BUILD=true npm run build
          else
            npm run build
          fi
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_BUILD_TIME: ${{ github.run_number }}
      
      - name: 📏 Bundle Analysis
        run: |
          npm run analyze-bundle -- --json > bundle-analysis.json
          echo "## Bundle Analysis - ${{ matrix.build-target }}" >> $GITHUB_STEP_SUMMARY
          node -e "
            const analysis = require('./bundle-analysis.json');
            console.log('| File | Size | Gzipped |');
            console.log('|------|------|---------|');
            analysis.assets.forEach(asset => {
              console.log(\`| \${asset.name} | \${asset.size} | \${asset.gzipped || 'N/A'} |\`);
            });
          " >> $GITHUB_STEP_SUMMARY
      
      - name: 🗜️ Compress Build Artifacts
        run: |
          cd dist
          tar -czf ../build-${{ matrix.build-target }}-${{ github.sha }}.tar.gz .
          cd ..
      
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.build-target }}-${{ github.run_number }}
          path: |
            build-${{ matrix.build-target }}-${{ github.sha }}.tar.gz
            bundle-analysis.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: 🔍 Lighthouse Performance Audit
        if: matrix.build-target == 'modern'
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ---------------------------------------------------------------------------
  # SECURITY SCANNING JOB
  # Comprehensive security analysis including SAST and dependency scanning
  # ---------------------------------------------------------------------------
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality
      
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: 🔎 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
      
      - name: 🕷️ Dependency Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'package-lock.json'
          format: 'sarif'
          output: 'dependency-results.sarif'
      
      - name: 📊 Upload Dependency Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'dependency-results.sarif'
      
      - name: 🔐 Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ---------------------------------------------------------------------------
  # DEPLOYMENT JOB WITH ENVIRONMENT PROMOTION
  # Handles deployment to staging and production environments
  # ---------------------------------------------------------------------------
  deploy:
    name: 🚀 Deploy to ${{ needs.setup.outputs.target-environment }}
    runs-on: ubuntu-latest
    needs: [setup, quality-check, test, build, security-scan]
    if: needs.setup.outputs.should-deploy == 'true'
    timeout-minutes: 20
    
    environment:
      name: ${{ needs.setup.outputs.target-environment }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-modern-${{ github.run_number }}
      
      - name: 🗜️ Extract Build Artifacts
        run: |
          tar -xzf build-modern-${{ github.sha }}.tar.gz
          ls -la
      
      - name: ☁️ Configure Cloud Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: 🚀 Deploy to ${{ needs.setup.outputs.target-environment }}
        id: deploy
        run: |
          # Deployment logic based on environment
          if [[ "${{ needs.setup.outputs.target-environment }}" == "production" ]]; then
            BUCKET_NAME="${{ secrets.PROD_S3_BUCKET }}"
            CLOUDFRONT_ID="${{ secrets.PROD_CLOUDFRONT_ID }}"
            DEPLOYMENT_URL="https://your-production-domain.com"
          else
            BUCKET_NAME="${{ secrets.STAGING_S3_BUCKET }}"
            CLOUDFRONT_ID="${{ secrets.STAGING_CLOUDFRONT_ID }}"
            DEPLOYMENT_URL="https://staging.your-domain.com"
          fi
          
          # Upload to S3
          aws s3 sync . s3://${BUCKET_NAME} --delete --cache-control "max-age=31536000"
          
          # Update HTML files with shorter cache
          aws s3 cp . s3://${BUCKET_NAME} --recursive --exclude "*" --include "*.html" --cache-control "max-age=300"
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"
          
          echo "deployment-url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
      
      - name: 🔍 Post-Deployment Health Check
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          
          # Wait for deployment to propagate
          sleep 30
          
          # Health check with retries
          for i in {1..5}; do
            if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "❌ Health check failed on attempt $i"
              if [[ $i -eq 5 ]]; then
                exit 1
              fi
              sleep 10
            fi
          done
      
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ needs.setup.outputs.target-environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ steps.deploy.outputs.deployment-url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Timestamp | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # NOTIFICATION JOB
  # Sends notifications about workflow results to various channels
  # ---------------------------------------------------------------------------
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [setup, quality-check, test, build, security-scan, deploy]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 🔔 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '✅' || '❌' }} CI/CD Pipeline ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*AI Image Generator Platform - CI/CD Pipeline*\n\n*Status:* ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}\n*Branch:* `${{ github.ref_name }}`\n*Commit:* `${{ github.sha }}`\n*Actor:* ${{ github.actor }}\n*Environment:* ${{ needs.setup.outputs.target-environment || 'N/A' }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null
      
      - name: 📧 Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "${{ job.status == 'success' && '✅' || '❌' }} CI/CD Pipeline ${{ job.status }} - ${{ github.repository }}"
          body: |
            AI Image Generator Platform CI/CD Pipeline Report
            
            Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Environment: ${{ needs.setup.outputs.target-environment || 'N/A' }}
            
            Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Job Results:
            - Setup: ${{ needs.setup.result }}
            - Quality Check: ${{ needs.quality-check.result }}
            - Tests: ${{ needs.test.result }}
            - Build: ${{ needs.build.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Deploy: ${{ needs.deploy.result }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_FROM_EMAIL }}
        if: env.NOTIFICATION_EMAIL != null && (needs.deploy.result == 'failure' || github.ref == 'refs/heads/main')
        env:
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

  # ---------------------------------------------------------------------------
  # CLEANUP JOB
  # Performs cleanup tasks and maintenance operations
  # ---------------------------------------------------------------------------
  cleanup:
    name: 🧹 Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 🗑️ Clean Old Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep only the latest 5 artifacts per workflow
            const artifactsToDelete = artifacts.data.artifacts.slice(5);
            
            for (const artifact of artifactsToDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
      
      - name: 📊 Workflow Analytics
        run: |
          echo "## 📊 Workflow Analytics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Jobs | ${{ strategy.job-total || '6' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Successful Jobs | ${{ strategy.job-index || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Duration | ${{ github.event.workflow_run.run_duration_ms || 'N/A' }}ms |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY

# =============================================================================
# SUCCESS CRITERIA & VALIDATION
# =============================================================================

# ✅ SUCCESS CRITERIA:
# 1. All quality checks pass (lint, type-check, format, security)
# 2. Test coverage > 80% across all test types
# 3. Build completes successfully for both modern and legacy targets
# 4. Bundle size < 500KB gzipped for main bundle
# 5. Security scans report no high-severity vulnerabilities
# 6. Deployment health checks pass
# 7. Lighthouse performance score > 90
# 8. No breaking changes in API compatibility

# 🔍 VALIDATION STEPS:
# 1. Code quality gates enforce standards
# 2. Multi-environment testing ensures compatibility
# 3. Security scans prevent vulnerabilities
# 4. Performance budgets maintain speed
# 5. Health checks validate deployments
# 6. Notifications ensure team awareness
# 7. Artifacts enable rollback capabilities
# 8. Cleanup maintains repository hygiene

# ⚠️ FAILURE HANDLING:
# 1. Failed jobs block deployment progression
# 2. Security issues trigger immediate alerts
# 3. Performance regressions require manual approval
# 4. Deployment failures trigger automatic rollback
# 5. Critical failures send immediate notifications
# 6. All failures are logged for analysis

# 🔄 RETRY MECHANISMS:
# 1. Network operations retry up to 3 times
# 2. Health checks retry with exponential backoff
# 3. Deployment operations have built-in retry logic
# 4. Artifact uploads retry on temporary failures
# 5. External API calls implement circuit breakers
